#!/usr/bin/perl

use 5.006;
use strict;

use PerlReq::Utils qw(argv explode inc mod2path path2dep sv_version verf);

use Getopt::Long qw(GetOptions);
GetOptions "v|verbose" => \my $Verbose, "d|debug" => \my $Debug or exit(1);
$Debug ||= $ENV{RPM_SCRIPTS_DEBUG};
$Verbose ||= $Debug;
$| = 1;

# list of provides
my %prov;

# begin
process_file($_) foreach argv();

sub process_file {
	my $fname = shift;
	warn "# processing $fname\n" if $Debug;

	my ($prefix, $basename) = explode($fname);
	unless ($prefix) {
		warn "# $fname does not match any prefix\n" if $Debug;
		return;
	} else {
		warn "# $fname has prefix $prefix\n" if $Debug;
	}

	if ($fname =~ /\.p[lh]$/) {
		$prov{$basename} ||= undef;
		warn "# $fname has basename $basename\n" if $Verbose;
		return;
	} elsif ($basename =~ /\.pm$/) {
		$prov{$basename} ||= undef;
		warn "# $fname has basename $basename, checking version\n" if $Verbose;
	} elsif ($basename =~ /\.al$/) {
		warn "# $fname (autoloaded file SKIP)" if $Debug;
		return;
	} else {
		warn "# $fname has basename $basename (SKIP)\n";
		return;
	}
	my $cur_pkg = "main";
	my $re_pkg = qr/\b\w+(?:::\w+)*/;
	open my $fh, $fname or die "$0: $fname: $!\n";
	local $_;
	while (<$fh>) {
		chomp;
		next if /^\s*#/;
		next if /^=\w/ .. (/^=cut/ or eof);
		last if /^__(DATA|END)__\b/;
		if (/^\s*\{?\s*package\s+($re_pkg)\s*;/) {
			$cur_pkg = $1;
			warn "# package $cur_pkg at $fname line $.\n" if $Debug;
		} elsif (/\$($re_pkg)::VERSION\s*\)?\s*=.*\d/) {
			my $pkg = $1;
			if (mod2path($pkg) ne $basename) {
				warn "# saw \$$pkg\::VERSION at $fname line $. (SKIP)\n";
				next;
			}
			my $v = extract_version($fname, $_, $pkg);
			if ($v) {
				$prov{$basename}{$v} = undef;
				last;
			}
		} elsif (/\$VERSION\s*\)?\s*=.*\d/) {
			if (mod2path($cur_pkg) ne $basename) {
				warn "# saw \$VERSION in package $cur_pkg at $fname line $. (SKIP)\n";
				next;
			}
			my $v = extract_version($fname, $_);
			if ($v) {
				$prov{$basename}{$v} = undef;
				last;
			}
		}
	}
}

# end
foreach my $k (sort { uc($a) cmp uc($b) } keys %prov) {
	my $vv = $prov{$k};
	if ($vv) {
		print path2dep($k) . " = $_\n" foreach sort keys %$vv;
	} else {
		print path2dep($k) . "\n";
	}
}

sub extract_version {
	my ($fname, $line, $pkg) = @_;
	warn "# extracting version at line $.:\n# $line\n" if $Debug;
	my $code = "$line\n; \$VERSION";
	$code =~ s/\$\Q$pkg\::VERSION/\$VERSION/g if $pkg;

	use Safe;
	my $safe = Safe->new;
	$safe->permit_only(qw(:base_core :base_mem :base_orig));
	my $version = $safe->reval($code);
	goto bad if $@ or not $version;

	use B qw(svref_2object);
	our $perlbug32967 = \$version;
	my $v = sv_version(svref_2object(\$version));
	if ($v) {
		$v = verf($v);
		warn "# VERSION $v at $fname line $.\n" if $Verbose;
		return $v;
	}
bad:
	warn "# WARNING: failed to extract version at $fname line $.:\n";
	warn "# $line\n";
	warn "# $@\n" if $@;
	return;
}

__END__

=head1	NAME

perl.prov - list what Perl source files provide

=head1	SYNOPSIS

B<perl.prov> [B<-v>] [B<-d>] [I<file>]...

=head1	DESCRIPTION

This script calculates conventional name for each Perl source I<file>
specified on a command line, based on its location relative to standard
Perl library paths; alternatively, a list of files is obtained from
standard input, one file per line.  F<*.pm>, F<*.pl>, and F<*.ph> files
are processed (F<*.pm> files also suffer version extraction).  The
output of perl.prov is suitable for automatic dependency tracking (e.g.
for RPM packaging).

For example, F</usr/lib/perl5/i386-linux/DB_File.pm> provides
C<perl(DB_File.pm) = 1.810> (as of perl-5.8.6).

perl.prov is a counterpart of L<perl.req>.

=head1	OPTIONS

=over

=item	B<-v>, B<--verbose>

Output extra information about the work being done.

=item	B<-d>, B<--debug>

Enable debugging output (implies --verbose option).  Alternatively,
RPM_SCRIPTS_DEBUG environment variable can be set to enable debugging
output.

=back

The RPM_PERL_LIB_PATH environment variable, if set, must contain the
list of paths, separated by colons. These paths are considered as
library paths used to determine relative names of provided perl files
(in addition to paths from C<@INC> variable).

=head1	AUTHOR

Written by Alexey Tourbin <at@altlinux.org>,
based on an earlier version by Ken Estes <kestes@staff.mail.com>,
with contributions from Mikhail Zabaluev <mhz@altlinux.org>.

=head1	COPYING

Copyright (c) 2003, 2004 Alexey Tourbin, ALT Linux Team.

This is free software; you can redistribute it and/or modify it under
the terms of the GNU Library General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

=head1	SEE ALSO

L<perl.req>
